     1                                  ; Lab5 - Problem 15
     2                                  ; Two character strings S1 and S2 are given. 
     3                                  ; Obtain the string D by concatenating the elements found on even positions in S2 and the elements found on odd positions in S1. 
     4                                  
     5                                  bits 32 
     6                                  global start        
     7                                  extern exit               
     8                                  import exit msvcrt.dll   
     9                                                            
    10                                  segment data use32 class=data
    11 00000000 616263646566                s1 DB 'abcdef'      ; Out: bdf
    12                                      len1 EQU $-s1
    13 00000006 6162636465666768            s2 DB 'abcdefgh'    ; Out: aceg
    14                                      len2 EQU $-s2
    15 0000000E 00<rept>                    res times ((len1 + len2) / 2) + 1 DB 0 
    16 00000016 02                          const2 DB 2
    17                                      ; Expected: acegbdf
    18                                      
    19                                  segment code use32 class=code
    20                                      start:
    21 00000000 BF[0E000000]                    MOV EDI, res
    22 00000005 FC                              CLD
    23                                          
    24                                          ; Parse s2 - even positions (consider 0 even)
    25 00000006 BE[06000000]                    MOV ESI, s2
    26 0000000B B908000000                      MOV ECX, len2
    27 00000010 6683E300                        AND BX, 0   ; Probably could have used ECX as a counter somehow 
    28                                                      ;  but using a separate counter seems easier
    29 00000014 E318                            JECXZ end1
    30                                          loop1:
    31 00000016 6689D8                              MOV AX, BX
    32 00000019 F635[16000000]                      DIV BYTE [const2]   ; AH = BX % 2
    33 0000001F 80FC00                              CMP AH, 0           ; Check position parity
    34 00000022 7505                                JNZ skip1           ; Skip if position is not even
    35 00000024 A4                                  MOVSB               ; EDI[BX] = ESI[BX]
    36                                                                  ; inc(EDI), inc(ESI)
    37 00000025 6643                                inc(BX)             ; Increment counter
    38 00000027 E2ED                                LOOP loop1
    39                                              skip1:  
    40 00000029 46                                  inc(ESI)
    41 0000002A 6643                                inc(BX)             ; Increment counter
    42 0000002C E2E8                                LOOP loop1
    43                                          end1:
    44                                          
    45                                          ; Parse s1 - odd positions
    46 0000002E BE[00000000]                    MOV ESI, s1
    47 00000033 B906000000                      MOV ECX, len1
    48 00000038 6683E300                        AND BX, 0
    49                                          
    50 0000003C E31C                            JECXZ end2        
    51                                          loop2:
    52 0000003E 6689D8                              MOV AX, BX
    53 00000041 F635[16000000]                      DIV BYTE [const2]   ; AH = BX % 2
    54 00000047 80FC00                              CMP AH, 0           ; Check position parity
    55 0000004A 7407                                JZ skip2            ; Skip if position is  even
    56 0000004C A4                                  MOVSB               ; EDI[BX] = ESI[BX]
    57                                                                  ; inc(EDI), inc(ESI)
    58 0000004D 6643                                inc(BX)             ; Increment counter
    59 0000004F E309                                JECXZ end2          ; ECX is 0, then it moves to 0xFF
    60 00000051 E2EB                                LOOP loop2
    61                                              skip2:  
    62 00000053 46                                  inc(ESI)
    63 00000054 6643                                inc(BX)             ; Increment counter
    64 00000056 E302                                JECXZ end2          ; ECX is 0, then it moves to 0xFF
    65 00000058 E2E4                                LOOP loop2
    66                                          end2:
    67                                          
    68 0000005A 6A00                            push    dword 0      
    69 0000005C FF15[00000000]                  call    [exit]       
