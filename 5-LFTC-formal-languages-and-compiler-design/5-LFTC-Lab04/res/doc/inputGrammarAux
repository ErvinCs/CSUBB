<program> ::= "beginp" <declist> <stmtlist> "endp"
<decllist> ::= <decl> | <decl> <decllist>
<decl> ::= "const" <data_type> <identifier> ";" | <data_type> <identifier> ";"
<data_type> ::= "int" | "char" | <struct>
<struct> ::= "struct" <identifier> "{" <decllist> "}"
<stmtlist> ::= <stmt> | <stmt> <stmtlist>
<stmt> ::= <assignstmt> ";" | <inputstmt> ";" | <ouputstmt> ";" | <condstmt> ";" | <whilestmt> ";"
<assignstmt> ::= <identifier> "=" <expr> ";"
<inputstmt> ::= "read" <identifier> ";"
<ouputstmt> ::=   "write" <expr> ";"
<condstmt> ::= "if" <boolexpr> "then" <stmtlist> ["else" stmtlist]
<whilestmt> ::= "while" <boolexpr> "do" <stmtlist> "done"
<expr> ::= <arithexpr> | <boolexpr> | <const> | <identifier>
<arithexpr> ::= <expr> <arith_operator> <expr>
<boolexpr> ::= "true" | "false" | <expr> <cond_operator> <expr>


<arith_operator> ::= "+" | "-" | "*" | "/" | "%"
<cond_operator> ::= "<" | "<=" | "==" | ">="
<assign_operator> ::= "="
<logic_operator> ::= "&&" | "||" | "!"
<separator> ::= "[" | "]" | "{" | "}" | "(" | ")" | ":" | ";" | " "
<reserved> ::= "int" | "char" | "struct" | "const" | "if" | "then" | "else" | "write" | "read" | "while" | "do" | "done" | "beginp" | "endp"

<identifier> ::= <letter> | <letter> <identifier> | <letter> <number> <identifier>
<letter> ::= "_" | "A" | "B" | ... | "Z" | "a" | "b" | ... | "z"
<number> ::= <digit> | <nonzero> <digit> | <nonzero> <digit> <number>
<digit> ::= <zero> | <nonzero>
<nonzero> ::= "1" | ... | "9"
<zero> ::= "0"

<const> ::= <zero> | <nonzero> | "-" <nonzero> | <number> | "-" <number>
<number> ::= <digit> | <nonzero> <digit> | <nonzero> <digit> <number>
<char> ::= <letter> | <digit>

----------------------------------------------------------------------------------------------------
BNF Grammar
Operator, Separator, Keyword - Terminals
Non-terminals

Non-terminals:
program decllist decl data_type struct stmtlist stmt assignstmt inputstmt outputstmt condstmt whilestmt expr arithexpr boolexpr
Terminals:
const int char struct beginp endp read write if then else while do done && || ! true false + * - / % < <= == > >= ; ( ) [ ] { } q w e r t y u i o p a s d f g h j k l z x c v b n m Q W E R T Y U I O P A S D F G H J K L Z X C V B N M 0 1 2 3 4 5 6 7 8 9 _
Productions:
program -> beginp declist stmtlist endp
decllist -> decl
decllist -> decl decllist
decl -> const data_type identifier ;
decl -> data_type identifier ;
data_type -> int
data_type -> char
data_type -> struct
struct -> struct identifier { decllist }
stmtlist -> stmt
stmtlist -> stmt stmtlist
stmt -> assignstmt ;
stmt -> inputstmt ;
stmt -> ouputstmt ;
stmt -> condstmt ;
stmt -> whilestmt ;
assignstmt -> identifier = expr ;
inputstmt -> read identifier ;
ouputstmt -> write expr ;
condstmt -> if boolexpr then stmtlist
condstmt -> if boolexpr then stmtlist else stmtlist
whilestmt -> while boolexpr do stmtlist done
expr -> arithexpr
expr -> boolexpr
expr -> const
expr -> identifier
arithexpr -> expr arith_operator expr
boolexpr -> true
boolexpr -> false
boolexpr -> expr cond_operator expr

arith_operator -> + | - | * | / | %
cond_operator -> < | <= | == | >=
assign_operator -> =
logic_operator -> && | || | !
separator -> [ | ] | { | } | ( | ) | : | ; |
reserved -> int | char | struct | const | if | then | else | write | read | while | do | done | beginp | endp

identifier -> letter | letter identifier | letter number identifier
letter -> _ | A | B | ... | Z | a | b | ... | z
number -> digit | nonzero digit | nonzero digit number
digit -> zero | nonzero
nonzero -> 1 | ... | 9
zero -> 0

const -> zero | nonzero | - nonzero | number | - number
number -> digit | nonzero digit | nonzero digit number
char -> letter | digit

Starting Symbol: beginp

//SEPARATORS ARE SPECIFIED WHEN USED